#include<stdio.h>
#include<stdlib.h>
typedef struct Node{
    struct treeNode* left;
    int data;
    struct treeNode* right;
}Node;
Node* createNode(int data){
    Node *newNode=(Node*)malloc(sizeof(Node));
    newNode->data=data;
    newNode->left=newNode->right=NULL;
    return newNode;
}
void insert(Node* root,int value){
    if(root==NULL)
        return createNode(value);
    else{
        Node* queue[100];
        int front=0,rear=0;
        queue[rear++]=root;
        while(front!=rear){
            Node* temp = queue[front++];
            printf("%d ",temp->data);
            if(temp->left==NULL){
                temp->left=createNode(value);
                break;
            }
            else if(temp->right==NULL){
                temp->right=createNode(value);
                
            }
            else{
                queue[rear++]=temp->left;
                queue[rear++]=temp->right;
            }
        }
    }
}
void preorder(Node* root){
    if(root!=NULL)
        printf("%d ",root->data);
        preorder(root->left);
        preorder(root->right);
}
void inorder(Node* root){
    if(root!=NULL)
        inorder(root->left);
        printf("%d ",root->data);
        inorder(root->right);
}
void postorder(Node* root){
    if(root!=NULL)
        postorder(root->left);
        postorder(root->right);
        printf("%d ",root->data);
}
void levelorder(Node* root){
    Node* queue[100];
    int front=0,rear=0;
    queue[rear++]=root;
    while(front!=rear){
        Node* temp = queue[front++];
        printf("%d ",temp->data);
        if(temp->left!=NULL)
            queue[rear++]=temp->left;
        if(temp->right!=NULL)
            queue[rear++]=temp->right;
    }
}
Node* search(Node* root, int value){
    Node* queue[100];
    int front=0,rear=0;
    queue[rear++]=root;
    while(front!=rear){
        Node* temp = queue[front++];
        if(value==temp->data)
            return temp;
        if(temp->left!=NULL)
            queue[rear++]=temp->left;
        if(temp->right!=NULL)
            queue[rear++]=temp->right;
    }
    return NULL;
}
Node* findDeepest(Node* root){
    Node* queue[100];
    int front=0,rear=0;
    queue[rear++]=root;
    Node* temp;
    while(front!=rear){
        temp = queue[front++];
        if(temp->left!=NULL)
            queue[rear++]=temp->left;
        if(temp->right!=NULL)
            queue[rear++]=temp->right;
    }
    int i=(rear-2)/2;   //to find parent node
    if(queue[i]->left==temp)
        queue[i]->left=NULL;
    else
        queue[i]->right=NULL;
    return temp;
}
void delete(Node* root,int value){
    Node* temp=search(root,value);
    if(temp==NULL)
        printf("Element Not available!!\n");
    else{
        Node* last=findDeepest(root);
        temp->data=last->data;
        free(last);
        printf("Node Deleted!!\n");
    }
}
int main(){
    int choice,value;
    Node* root=NULL;
    while(1){
        printf("1.Insert\n");
        printf("2.Preorder\n");
        printf("3.Inorder\n");
        printf("4.Postorder\n");
        printf("5.Leveloreder\n");
        printf("6.Search\n");
        printf("7.Delete\n");
        printf("8.Exit\n");
        printf("Enter choice:");
        scanf("%d",&choice);
        switch(choice){
            case 1:
                break;
            case 2:
                break;
            case 3:
                break;
            case 4:
                break;
            case 5:
                break;
            case 6:
                break;
            case 7:
                break;
            case 8:
                exit(0);
            default:
                printf("Invalid Choice!!\n");
        }
        printf("\n");
    }
}
